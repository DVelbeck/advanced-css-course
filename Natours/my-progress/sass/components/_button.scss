// Button is reusable so it is a component
.btn {
    &, // to make this available to all elements with .btn class like <button>
    /* :link, 
    :visited ...
    pseudo class state for special conditions
    only apply if element has these pseudo classes (like anchor)!!!
    NOT BUTTON!!!!
    */
    &:link,
    &:visited {
        text-transform: uppercase;
        text-decoration: none;
        padding: 1.5rem 4rem;
        /* inline-block makes the element not overlap the element above 
         therefore we can treat the element as a text => text-center in parent*/
        display: inline-block;
        border-radius: 10rem;

        /* Short-end version for quick animation without bothering */
        transition: all .2s;
        position: relative;
        font-size: $default-font-size;

        // Change for the <button> element
        border: none;
        cursor: pointer;
    }

    /* when hovering btn */
    &:hover {
        transform: translateY(-.3rem);
        @include base_box_shadow();
        
        /* pseudo element ::after only on the :over state */
        &::after {
            /* double the scale of the pseudo element */
            transform: scaleX(1.4) scaleY(1);
            opacity: 0;

            /* !! always define the animation from the parent element, here the :after state */
        }
    }

    /* when clicking btn (anchor) or on focus (button) */
    &:active,
    &:focus {
        transform: translateY(-.1rem);
        /* show box offset-x | offset-y | blur-radius | color */
        @include base_box_shadow();
    }

    // Do not move, executes before btn --white
    &::after {
        /* to be at the same position of the effects in ::hover */
        transform: translateY(0);
    }


    &--white {
        background-color: $colour-white;
        color: $colour-grey-dark-1;

        /* ::after put something behind the element
        ::after pseudo element is treated like a child of the btn element */
        &::after {
            background-color: $colour-white;
        }
    }

    &--green {
        background-color: $colour-primary;
        color: $colour-white;

        /* ::after put something behind the element
        ::after pseudo element is treated like a child of the btn element */
        &::after {
            background-color: $colour-primary;
        }
    }

    /* ::after put something behind the element
    ::after pseudo element is treated like a child of the btn element */
    &::after {
        content: "";
        /* mandatory so the pseudo element appears */
        display: inline-block;
        height: 100%;
        width: 100%;
        border-radius: 10rem;

        /* put the pseudo element behind the parent element */
        position: absolute;
        top: 0;
        left: 0;
        z-index: -1;

        /* enable child elements transitions animations */
        transition: all .4s;
    }

    &--animated {
        /* shortened version animation the element */
        animation: moveInBottom .5s ease-out .75s;

        /* for practicality, instead of putting the animation on the parent .btn element
        * we can specify it here with animation-fill-mode: backwards
        * which forces the browser to execute the animation first 
        * before the parent element appears
        */
        animation-fill-mode: backwards;

    }

}

// .btn--animated {
//     /* shortened version animation the element */
//     animation: moveInBottom .5s ease-out .75s;

//     /* for practicality, instead of putting the animation on the parent .btn element
//     * we can specify it here with animation-fill-mode: backwards
//     * which forces the browser to execute the animation first 
//     * before the parent element appears
//     */
//     animation-fill-mode: backwards;
// }

.btn-text{
    &:link,
    &:visited{
        font-size: $default-font-size;
        color: $colour-primary;
        display: inline-block;
        text-decoration: none;
        border-bottom: 1px solid $colour-primary;
        padding: 3px;

        /* enable child elements transitions animations */
        transition: all .2s;
    }

    &:hover{
        background-color: $colour-primary;
        color: $colour-white;
        @include base_box_shadow(.15);
        transform: translateY(-2px);
    }
    &:active{
        @include base_box_shadow(.15);
        transform: translateY(0);
    }
}