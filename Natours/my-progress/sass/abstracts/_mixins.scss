// @mixin box_shadow($blur-radius){
//     box-shadow: .2rem .15rem $blur-radius rgba($color-black, .2);
// }

@mixin clearfix {
    // avoid the row to collapse because of the floating cols
    &::after{
        content: "";
        display: table;
        // clear any used float: left or float: right
        clear: both;
    }

}

@mixin elementGradient{
    @include mainBackgroundGradient;
    -webkit-background-clip: text;
    color: transparent;
}

@mixin mainBackgroundGradient {
    @include imageGradient(
        $colour-primary-light, 
        $colour-primary-dark,
        0.8,
        to right
    );
}

@mixin imageGradient($startColour, $endColour, $opacity:1, $direction: to right bottom) {
    background-image: linear-gradient(
        $direction,
        rgba($startColour, $opacity),
        rgba($endColour, $opacity)
    );
}

@mixin imageGradientWithURL($startColour, $endColour, $opacity:1, $url: '', $direction: to right bottom) {
    background-image: linear-gradient(
        $direction,
        rgba($startColour, $opacity),
        rgba($endColour, $opacity),
    ), url($url);
}


// @mixin calculateWidth($colSpan, $nbColumns) {
//     /* 
//     1 - use #{} around SASS variables so it gets compiled
//     2 - $colSpan spreading size of the column
//     3 - $nb of columns included in row grid
//     */ 

//     // Get size of all gutters
//     // -1 is because we don't want a gutter after last column
//     $totalGuttersWidth: calc(#{$nbColumns} - 1) * #{$gutter-horizontal};

//     // initial column width
//     $initColumnWidth: calc((100% - #{$totalGuttersWidth}) / #{$nbColumns});

//     // eventually return the actual column width
//     width: calc((#{$colSpan} * $initColumnWidth) + ();
// }